<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gravity Pong</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #000;
            color: #fff;
        }
        canvas {
            border: 2px solid white;
        }
        button {
            margin: 5px;
            padding: 10px;
            cursor: pointer;
        }
        #menu {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 20px;
        }
        #settings {
            position: absolute;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 18px;
            color: white;
        }
        #endGameMenu {
            display: none;
        }
    </style>
</head>
<body>
    <div id="menu">
        <h1>Gravity Pong</h1>
        <button onclick="startGame('single')">Single Player</button>
        <button onclick="startGame('two')">Two Player</button>
    </div>
    <div id="difficultyMenu" style="display:none;">
        <h2>Select Difficulty</h2>
        <button onclick="startSinglePlayerGame('easy')">Easy</button>
        <button onclick="startSinglePlayerGame('hard')">Hard</button>
        <button onclick="startSinglePlayerGame('impossible')">Impossible</button>
    </div>
    <div id="scoreLimitMenu" style="display:none;">
        <h2>Select Score Limit</h2>
        <button onclick="setScoreLimit(5)">First to 5</button>
        <button onclick="setScoreLimit(11)">First to 11</button>
    </div>
    <canvas id="gameCanvas" width="800" height="600" style="display:none;"></canvas>
    <div id="settings" style="display:none;"></div>
    <div id="endGameMenu">
        <h2>Game Over!</h2>
        <button onclick="resetGame()">Back to Menu</button>
    </div>
    <button onclick="changeGravity(0.1)">Earth Gravity</button>
    <button onclick="changeGravity(0.2)">Mars Gravity</button>
    <button onclick="changeGravity(0.05)">Moon Gravity</button>

    <script>
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");
        const settingsDisplay = document.getElementById("settings");

        // Paddle and Ball Settings
        const paddleWidth = 10, paddleHeight = 100;
        let paddle1Y = canvas.height / 2 - paddleHeight / 2;
        let paddle2Y = canvas.height / 2 - paddleHeight / 2;
        const ballRadius = 10;
        let ballX = canvas.width / 2, ballY = canvas.height / 2;
        let ballSpeedX = 5 * (Math.random() < 0.5 ? 1 : -1);
        let ballSpeedY = 3 * (Math.random() < 0.5 ? 1 : -1);

        // Score and Gravity Settings
        let player1Score = 0, player2Score = 0;
        let gravity = 0.1;
        let difficulty = "Normal"; // Default difficulty
        let scoreLimit = 5; // Default score limit

        // Audio Effects
        const hitSound = new Audio("hit.mp3");
        const scoreSound = new Audio("score.mp3");

        // Key States
        const keys = {
            w: false,
            s: false,
            ArrowUp: false,
            ArrowDown: false,
        };

        // Bot difficulty settings
        let botSpeed = 4; // Default speed for hard difficulty
        let reactionTime = 1; // Default reaction time for hard difficulty

        function startGame(mode) {
            document.getElementById("menu").style.display = "none";
            if (mode === 'single') {
                document.getElementById("difficultyMenu").style.display = "block"; // Show difficulty selection
            } else {
                document.getElementById("scoreLimitMenu").style.display = "block"; // Show score limit selection
            }
        }

        function startSinglePlayerGame(selectedDifficulty) {
            document.getElementById("difficultyMenu").style.display = "none"; // Hide difficulty menu
            document.getElementById("scoreLimitMenu").style.display = "block"; // Show score limit selection
            setBotDifficulty(selectedDifficulty);
        }

        function setBotDifficulty(selectedDifficulty) {
            difficulty = selectedDifficulty.charAt(0).toUpperCase() + selectedDifficulty.slice(1); // Capitalize the first letter
            if (selectedDifficulty === 'easy') {
                botSpeed = 2; // Slow bot speed for easy
                reactionTime = 2; // Slow reaction time for easy
            } else if (selectedDifficulty === 'hard') {
                botSpeed = 4; // Normal bot speed for hard
                reactionTime = 1; // Normal reaction time for hard
            } else if (selectedDifficulty === 'impossible') {
                botSpeed = 6; // Fast bot speed for impossible
                reactionTime = 0.5; // Quick reaction time for impossible
            }
            updateSettingsDisplay();
        }

        function setScoreLimit(limit) {
            scoreLimit = limit;
            document.getElementById("scoreLimitMenu").style.display = "none"; // Hide score limit menu
            canvas.style.display = "block"; // Show game canvas
            resetBall();
            gameLoop();
        }

        function draw() {
            // Clear the canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawPaddles();
            drawBall();
            drawScores();
            updateBall();
            movePaddles();
        }

        function movePaddles() {
            // Player 1 controls (Left Pong)
            if (keys.w) {
                paddle1Y = Math.max(0, paddle1Y - 5); // Move up
            }
            if (keys.s) {
                paddle1Y = Math.min(canvas.height - paddleHeight, paddle1Y + 5); // Move down
            }

            // Player 2 controls (Right Pong)
            if (keys.ArrowUp) {
                paddle2Y = Math.max(0, paddle2Y - 5); // Move up
            }
            if (keys.ArrowDown) {
                paddle2Y = Math.min(canvas.height - paddleHeight, paddle2Y + 5); // Move down
            }

            // Bot movement (for single player)
            if (difficulty !== "Normal" && !keys.w && !keys.s) {
                if (ballY > paddle2Y + paddleHeight / 2 + reactionTime) {
                    paddle2Y += botSpeed; // Move down
                } else if (ballY < paddle2Y + paddleHeight / 2 - reactionTime) {
                    paddle2Y -= botSpeed; // Move up
                }
            }
            // Keep bot paddle within bounds
            paddle2Y = Math.max(0, Math.min(canvas.height - paddleHeight, paddle2Y));
        }

        function drawPaddles() {
            ctx.fillStyle = "white";
            ctx.fillRect(0, paddle1Y, paddleWidth, paddleHeight);
            ctx.fillRect(canvas.width - paddleWidth, paddle2Y, paddleWidth, paddleHeight);
        }

        function drawBall() {
            ctx.fillStyle = "red";
            ctx.beginPath();
            ctx.arc(ballX, ballY, ballRadius, 0, Math.PI * 2);
            ctx.fill();
        }

        function drawScores() {
            ctx.fillStyle = "white";
            ctx.font = "20px Arial";
            ctx.fillText(`Player 1: ${player1Score}`, 50, 30);
            ctx.fillText(`Player 2: ${player2Score}`, canvas.width - 100, 30);
        }

        function updateBall() {
            ballX += ballSpeedX;
            ballY += ballSpeedY;

            // Check for collision with paddles
            if (ballY + ballRadius > canvas.height || ballY - ballRadius < 0) {
                ballSpeedY = -ballSpeedY; // Reverse vertical direction
            }
            if (ballX - ballRadius < paddleWidth && ballY > paddle1Y && ballY < paddle1Y + paddleHeight) {
                ballSpeedX = -ballSpeedX; // Reverse horizontal direction
                hitSound.play(); // Play hit sound
            } else if (ballX + ballRadius > canvas.width - paddleWidth && ballY > paddle2Y && ballY < paddle2Y + paddleHeight) {
                ballSpeedX = -ballSpeedX; // Reverse horizontal direction
                hitSound.play(); // Play hit sound
            }

            // Check for scoring
            if (ballX < 0) {
                player2Score++;
                scoreSound.play(); // Play score sound
                resetBall();
            } else if (ballX > canvas.width) {
                player1Score++;
                scoreSound.play(); // Play score sound
                resetBall();
            }
        }

        function resetBall() {
            ballX = canvas.width / 2;
            ballY = canvas.height / 2;
            ballSpeedX = 5 * (Math.random() < 0.5 ? 1 : -1);
            ballSpeedY = 3 * (Math.random() < 0.5 ? 1 : -1);
        }

        function resetGame() {
            player1Score = 0;
            player2Score = 0;
            document.getElementById("endGameMenu").style.display = "none";
            document.getElementById("menu").style.display = "block";
        }

        function updateSettingsDisplay() {
            settingsDisplay.textContent = `Difficulty: ${difficulty}, Gravity: ${gravity}, Score Limit: ${scoreLimit}`;
        }

        function changeGravity(newGravity) {
            gravity = newGravity;
        }

        function gameLoop() {
            draw();
            requestAnimationFrame(gameLoop);
        }

        document.addEventListener("keydown", function(event) {
            if (event.key === "w") {
                keys.w = true;
            } else if (event.key === "s") {
                keys.s = true;
            } else if (event.key === "ArrowUp") {
                keys.ArrowUp = true;
            } else if (event.key === "ArrowDown") {
                keys.ArrowDown = true;
            }
            event.preventDefault(); // Prevent default actions for keys
        });

        document.addEventListener("keyup", function(event) {
            if (event.key === "w") {
                keys.w = false;
            } else if (event.key === "s") {
                keys.s = false;
            } else if (event.key === "ArrowUp") {
                keys.ArrowUp = false;
            } else if (event.key === "ArrowDown") {
                keys.ArrowDown = false;
            }
        });

        // Automatically focus on canvas when page loads
        window.onload = () => {
            canvas.focus();
        };
    </script>
</body>
</html>
